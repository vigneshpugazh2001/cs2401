//vignesh pugazhenthi
//d list class template implemenation

#include <iostream>
using namespace std;

template <class T>
dlist<T>::dlist(){
    head = NULL;
    tail = NULL;
}

template <class T>
dlist<T>::~dlist()
{
    Dnode<T>* removeptr;

    while (head != NULL)
    {
        removeptr = head;
        head = head->next();
        delete removeptr;
    }
}

template <class T>
dlist<T>::dlist(const T& other)
{
    if (other.head == NULL)
    {
        head = NULL;
    }

    else{
        Dnode<T>* sourceptr, *destinationptr;
        head = tail = new Dnode<T>(other.head->data());
        sourceptr = other.head->next();
        destinationptr = tail;
        while (sourceptr != NULL)
        {
            destinationptr->set_next(new Dnode<T>(sourceptr->data(), destinationptr));
            tail = destinationptr = destinationptr->next();
            sourceptr = sourceptr->next();
        }
        delete sourceptr;
    }
}

template <class T>
dlist<T> dlist<T>::operator= (const T& other)
{
    if (this == other)
    {
        return 0;
    }

    if(other.head == NULL)
    {
        head = NULL;
    }

    else
    {
        Dnode<T>* sourceptr, *destinationptr;
        head = tail = new Dnode<T>(other.head->data());
        sourceptr = other.head->next();
        destinationptr = tail;
        while (sourceptr != NULL)
        {
            destinationptr->set_next(new Dnode<T>(sourceptr->data(), destinationptr));
            tail = destinationptr = destinationptr->next();
            sourceptr = sourceptr->next();
        }
        delete sourceptr;

    }
}

template<class T>
void dlist<T>::remove(iterator it){
    if(it.current == NULL)
    {
        cout << "Current equals NULL";
        return;
    }

    if (head == NULL)
    {
        cout << "Head equals NULL";
        return;
    }

    if (head == it.current)
    {
        front_remove();
        return;
    }

    if(tail == it.current)
    {
        rear_remove();
        return;
    }

    if (listcounter == 1)
    {
        front_remove();
    }

    else{
        Dnode<T>* tmp, *prev, *next;
        tmp = it.current;
        prev = it.current->previous();
        next = it.current->next();
        prev->set_next(next);
        next->set_previous(prev);
        it.current = next;
        delete tmp;
    }
    --listcounter;
}

template<class T>
void dlist<T>::insert_before(iterator& it, T item)
{
    Dnode<T>* tmp = it.current;

    if (listcounter == 1)
    {
        front_insert(item);
        return;
    }
    if (it.current == head)
    {
        Dnode<T>* cursor = head;
        it.current = new Dnode<T>(item, NULL, tmp);
        head = it.current;
    }

    else{
        it.current = new Dnode<T>(item, tmp->previous(), tmp);
        it.current->next()->set_previous(it.current);
        it.current->previous()->set_next(it.current);
    }
    ++listcounter;
}

template<class T>
void dlist<T>::insert_after(iterator& it, T item)
{
    Dnode<T>* tmp = it.current;
    if (listcounter == 1)
    {
        rear_insert(item);
        return;
    }

    if(it.current == tail)
    {
        rear_insert(item);
        return;
    }

    else{
        it.current = new Dnode<T>(item, it.current, it.current->next());
        it.current->next()->set_previous(it.current);
        it.current->previous()->set_next(it.current);
    }
    ++listcounter;
}

template <class T>
void dlist<T>::front_insert(T item){
    //int listcounter;
    Dnode<T>* cursor = head;
    if (head == NULL)
    {
        head = new Dnode<T>(item, NULL, NULL);
        tail = head; //head equals tail equals a new object
        ++listcounter;
    }
    else {
        head->set_previous(new Dnode<T>(item, NULL, cursor)); 
        head = head->previous();
        ++listcounter;
    }
}

template <class T>
void dlist<T>::rear_insert(T item){
    //int listcounter;
    if (head == NULL)
    {
        head = tail = new Dnode<T>(item, NULL, NULL);
        ++listcounter;
    }
    else{
        tail->set_next(new Dnode<T>(item, tail));
        tail = tail->next();
        ++listcounter;
    }
}

template <class T>
void dlist<T>::front_remove(){
    Dnode<T>* rmptr = head;
    if (head == tail)
    {
        head = tail = NULL;
        delete rmptr;
        --listcounter;
        return;
    }

    if (head == NULL && tail == NULL)
    {
        cout << "No list is found" << endl;
        return;
    }

    else{
        head = head->next();
        head->set_previous(NULL);
        delete rmptr;
        --listcounter;
    }
}

template <class T>
void dlist<T>::rear_remove(){
    Dnode<T>* rmptr = tail;

    if (head == tail)
    {
        head = tail = NULL;
        delete rmptr;
        --listcounter;
        return;
    }

    if (head == NULL)
    {
        cout << "No list was found";
        return;
    }

    else{
        tail = tail->previous();
        tail->set_next(NULL);
        delete rmptr;
        --listcounter;
    }
}

template <class T>
void dlist<T>::show(){
    Dnode<T>* cursor = head;
    if (cursor == NULL)
    {
        cout << "No list" << endl;
    }

    while (cursor != NULL)
    {
        cout << cursor->data() << "\n";
        cursor = cursor->next();
    }
}

template <class T>
void dlist<T>::reverse_show(){
    Dnode<T>* cursor = tail;
    if (cursor == NULL)
    {
        cout << "No list" << endl;
    }

    while (cursor != NULL)
    {
        cout << cursor->data() << "\n";
        cursor = cursor->previous();
    }
}